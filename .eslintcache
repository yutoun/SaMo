[{"/Users/Yuto/Desktop/react/admin-finance/src/index.js":"1","/Users/Yuto/Desktop/react/admin-finance/src/App.js":"2","/Users/Yuto/Desktop/react/admin-finance/src/reportWebVitals.js":"3"},{"size":500,"mtime":1612594294947,"results":"4","hashOfConfig":"5"},{"size":14961,"mtime":1612594294945,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1611758349053,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wb99sl",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/Users/Yuto/Desktop/react/admin-finance/src/index.js",[],"/Users/Yuto/Desktop/react/admin-finance/src/App.js",["16","17"],"import React, { useState, useEffect } from 'react';\nimport ReactFlexyTable from \"react-flexy-table\" //テーブル\nimport \"react-flexy-table/dist/index.css\" //テーブル\nimport firebase from 'firebase'; // 追記\nimport 'firebase/firestore'; // 追記\nimport { makeStyles } from '@material-ui/core/styles';\nimport './App.css';\nimport { Button } from '@material-ui/core';\nimport clsx from 'clsx';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ChildCareOutlinedIcon from '@material-ui/icons/ChildCareOutlined';//おやつ\nimport SupervisorAccountOutlinedIcon from '@material-ui/icons/SupervisorAccountOutlined';//交際費\nimport LocalMallOutlinedIcon from '@material-ui/icons/LocalMallOutlined'; //ショッピング\nimport FastfoodOutlinedIcon from '@material-ui/icons/FastfoodOutlined'; //外食\nimport KitchenOutlinedIcon from '@material-ui/icons/KitchenOutlined'; //食材\nimport CreditCardIcon from '@material-ui/icons/CreditCard'; //クレカ\nimport BarChartIcon from '@material-ui/icons/BarChart'; //チャート\nimport HomeIcon from '@material-ui/icons/Home';//top\nimport ExploreIcon from '@material-ui/icons/Explore';//目標入力\nimport { BrowserRouter, Route, Link } from 'react-router-dom' // ルーティング\nimport { PieChart, Pie, Text, Cell } from 'recharts' //チャート\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n});\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDor3C9MPpYQwZPJgqD-gkOTk7DaA3OHgU\",\n  authDomain: \"samo-c765d.firebaseapp.com\",\n  databaseURL: \"https://samo-c765d-default-rtdb.firebaseio.com\",\n  projectId: \"samo-c765d\",\n  storageBucket: \"samo-c765d.appspot.com\",\n  messagingSenderId: \"561064197302\",\n  appId: \"1:561064197302:web:fdeb3ff86bf623c1847a17\",\n  measurementId: \"G-Z4Q410EL9V\"\n};\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\nfirebase.analytics();\n\nfunction App() {\n  const Home = () => (\n    <div>\n      <header>\n        <div class=\"openSidebar\">\n          {['三'].map((anchor) => (\n            <React.Fragment key={anchor}>\n              <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button>\n              <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n                {list(anchor)}\n              </Drawer>\n            </React.Fragment>\n          ))}\n        </div>\n        <div className=\"App-header\">SaMo {goalLength}</div>\n      </header>\n      <div className=\"middle\">\n              <div className=\"categories\">\n          <Button variant=\"outlined\" disableElevation className=\"category\" onClick={()=>{\n            categoryD('おやつ')\n          }}><ChildCareOutlinedIcon/><span className=\"category_title\">おやつ</span></Button>\n          <Button variant=\"outlined\" disableElevation className=\"category\" onClick={()=>{\n            categoryD('交際費')\n          }}><SupervisorAccountOutlinedIcon/><span className=\"category_title\">交際費</span></Button>\n          <Button variant=\"outlined\" disableElevation className=\"category\" onClick={()=>{\n            categoryD('ショッピング')\n          }}><LocalMallOutlinedIcon/><span className=\"category_title\">ショッピング</span></Button>\n          <Button variant=\"outlined\" disableElevation className=\"category\" onClick={()=>{\n            categoryD('外食')\n          }}><FastfoodOutlinedIcon/><span className=\"category_title\">外食</span></Button>\n          <Button variant=\"outlined\" disableElevation className=\"category\" onClick={()=>{\n            categoryD('食材')\n          }}><KitchenOutlinedIcon/><span className=\"category_title\">食材</span></Button>\n          <Button size=\"small\" disableElevation variant=\"contained\" className=\"plus\">+</Button>\n          <Button size=\"small\" disableElevation variant=\"contained\" className=\"minus\">-</Button>\n        </div>\n        <div className=\"creditNcost\">\n          <Button size=\"medium\" variant=\"contained\" color=\"primary\" disableElevation className=\"category creditCard\"  onClick={()=>{\n              setCredit(true)\n          }}><CreditCardIcon/><span className=\"category_title\">クレカ</span></Button>\n          <span className=\"yen\">¥</span>\n          <input \n            type=\"text\" \n            className=\"inputCost\"\n            value = {cost}\n            placeholder=\"金額\"\n            onChange={(e) => {\n              costD(e.target.value);\n            }}\n          />\n          <Button variant=\"contained\" size=\"large\" disableElevation className=\"inputCost\" onClick={() => addInfo()}>送信</Button>\n        </div>\n        <p class=\"leftMoney\">今週は残り<span className=\"leftCost\">¥{leftCost}</span>使えるよ！</p>\n      </div>\n    </div>\n  )\n  const Goal = () => (\n    <div>\n      <header>\n        <div class=\"openSidebar\">\n          {['三'].map((anchor) => (\n            <React.Fragment key={anchor}>\n              <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button>\n              <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n                {list(anchor)}\n              </Drawer>\n            </React.Fragment>\n          ))}\n        </div>\n        <div className=\"App-header\">SaMo {goalLength}</div>\n      </header>\n      <h2>目標</h2>\n      <input \n        type=\"text\" \n        className=\"inputCost\"\n        value = {leftCost}\n        placeholder=\"金額\"\n        onChange={(e) => {\n          setleftCost(e.target.value);\n        }}\n      />\n      <Button variant=\"contained\" size=\"large\" disableElevation className=\"inputCost\">送信</Button>\n    </div>\n  )\n  const Graph = () => (\n    <div>\n      <header>\n        <div class=\"openSidebar\">\n          {['三'].map((anchor) => (\n            <React.Fragment key={anchor}>\n              <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button>\n              <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n                {list(anchor)}\n              </Drawer>\n            </React.Fragment>\n          ))}\n        </div>\n        <div className=\"App-header\">SaMo {goalLength}</div>\n      </header>\n      <div className=\"graphPage\">\n        <div className=\"graph\">\n          <h3>カテゴリ別利用金額</h3>\n          <PieChart width={700} height={400}>\n            <Pie data={Data} dataKey=\"value\" cx=\"50%\" cy=\"50%\" outerRadius={150} fill=\"#82ca9d\" label={label}>\n            {\n              Data.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)\n            }\n            </Pie>\n          </PieChart>\n          <p>今週は合計¥{totalPayment}利用済み</p>\n        </div>\n        <div className=\"table\">\n          <h3>クレカ利用明細</h3>\n          <div className=\"App\">\n            <div style={tableStyle}>\n              <ReactFlexyTable data={DataTable} />\n            </div>\n            <h4 className=\"displayCreditTotal\">今週は合計¥{CreditTotal}利用済み</h4>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n  const tableStyle = {\n    width: \"100%\",\n    margin: \"0 auto\",\n    marginTop: 70,\n  };\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', 'red'];\n  const label = ({ name, value, cx, x, y }) => {\n    const textAnchor = x > cx ? \"start\" : \"end\";\n    return (\n      <>\n        <Text x={x} y={y} textAnchor={textAnchor} fill=\"#82ca9d\">\n          {name}\n        </Text>\n        <Text\n          x={x}\n          y={y}\n          dominantBaseline=\"hanging\"\n          textAnchor={textAnchor}\n          fill=\"#82ca9d\"\n        >\n          {\"¥\"+value}\n        </Text>\n      </>\n    );\n  };\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List>\n        <ListItem button key='TOP'>\n          <ListItemIcon><HomeIcon /></ListItemIcon>\n          <Link to='/'><ListItemText primary='TOP' /></Link>\n        </ListItem>\n        <ListItem button key='目標'>\n          <ListItemIcon><ExploreIcon /></ListItemIcon>\n          <Link to='/Goal'><ListItemText primary='目標' /></Link>\n        </ListItem>\n        <ListItem button key='レポート'>\n          <ListItemIcon><BarChartIcon /></ListItemIcon>\n          <Link to='/Graph'><ListItemText primary='レポート' /></Link>\n        </ListItem>\n      </List>\n    </div>\n  );\n  const classes = useStyles();\n  const [goalLength, setGoalLength] = useState(\"\");\n  const [credit,setCredit] = useState(false);\n  const [category,categoryD] = useState(\"\");\n  const [totalPayment, settotalPayment] = useState(0);\n  const [cost,costD] = useState(\"\"); \n  const [results, resultsD] = useState([]);\n  const [DataTable, setDataTable] = useState([\n    { 日付: \"\", カテゴリ: \"\", 利用金額: \"\" }\n  ]);\n  const [CreditTotal, setCreditTotal] = useState(0);\n  const [leftCost, setleftCost] = useState(\"\"); //使用可能金額\n  const [Data, setData] = useState(\n    [\n      {\n        index: 0,\n        name: 'おやつ',\n        value: 0,\n      },\n      {\n        index: 1,\n        name: '交際費',\n        value: 0,\n      },\n      {\n        index: 2,\n        name: 'ショッピング',\n        value: 0,\n      },\n      {\n        index: 3,\n        name: '外食',\n        value: 0,\n      },\n      {\n        index: 4,\n        name: '食材',\n        value: 0,\n      }\n    ]\n  );\n  const addInfo =()=> {\n    const hiduke=new Date(); \n    const month = hiduke.getMonth()+1;\n    const day = hiduke.getDate();\n    const resultArr = {credit: credit, category: category, date: month+ '.' + day, cost:cost}\n    const resultArray = [... results, resultArr];\n    resultsD(resultArray)\n    costD(\"\")\n    resultArray.map((result, index) => {\n      result.cost = parseInt(result.cost)\n      if(result.credit){\n        setDataTable(DataTable.concat({ 日付: result.date, カテゴリ: result.category, 利用金額: '¥' + result.cost },))\n        setCreditTotal(CreditTotal + result.cost)\n      }\n        if(result.category===\"おやつ\"){\n          setData([\n          {\n            index: 0,\n            name: 'おやつ',\n            value: Data[0].value+result.cost,\n          },\n          {\n            index: index,\n            name: \"交際費\",\n            value: Data[1].value,\n          },\n          {\n            index: index,\n            name: \"ショッピング\",\n            value: Data[2].value,\n          },\n          {\n            index: index,\n            name: \"外食\",\n            value: Data[3].value,\n          },\n          {\n            index: index,\n            name: \"食材\",\n            value: Data[4].value,\n          },\n        ]);\n        }else if(result.category===\"交際費\"){\n          setData([\n            {\n              index: 0,\n              name: 'おやつ',\n              value: Data[0].value,\n            },\n            {\n              index: index,\n              name: \"交際費\",\n              value: Data[1].value+result.cost,\n            },\n            {\n              index: index,\n              name: \"ショッピング\",\n              value: Data[2].value,\n            },\n            {\n              index: index,\n              name: \"外食\",\n              value: Data[3].value,\n            },\n            {\n              index: index,\n              name: \"食材\",\n              value: Data[4].value,\n            },\n          ]);\n        }else if(result.category===\"ショッピング\"){\n          setData([\n            {\n              index: 0,\n              name: 'おやつ',\n              value: Data[0].value,\n            },\n            {\n              index: index,\n              name: \"交際費\",\n              value: Data[1].value,\n            },\n            {\n              index: index,\n              name: \"ショッピング\",\n              value: Data[2].value+result.cost,\n            },\n            {\n              index: index,\n              name: \"外食\",\n              value: Data[3].value,\n            },\n            {\n              index: index,\n              name: \"食材\",\n              value: Data[4].value,\n            },\n          ]);\n        }else if(result.category===\"外食\"){\n          setData([\n            {\n              index: 0,\n              name: 'おやつ',\n              value: Data[0].value,\n            },\n            {\n              index: index,\n              name: \"交際費\",\n              value: Data[1].value,\n            },\n            {\n              index: index,\n              name: \"ショッピング\",\n              value: Data[2].value,\n            },\n            {\n              index: index,\n              name: \"外食\",\n              value: Data[3].value+result.cost,\n            },\n            {\n              index: index,\n              name: \"食材\",\n              value: Data[4].value,\n            },\n          ]);\n        }else if(result.category===\"食材\"){\n          setData([\n            {\n              index: 0,\n              name: 'おやつ',\n              value: Data[0].value,\n            },\n            {\n              index: index,\n              name: \"交際費\",\n              value: Data[1].value,\n            },\n            {\n              index: index,\n              name: \"ショッピング\",\n              value: Data[2].value,\n            },\n            {\n              index: index,\n              name: \"外食\",\n              value: Data[3].value,\n            },\n            {\n              index: index,\n              name: \"食材\",\n              value: Data[4].value+result.cost,\n            },\n          ]);\n        }\n      settotalPayment(parseInt(totalPayment) + result.cost)\n      setleftCost(leftCost-result.cost);//使用可能金額の算出\n    })\n  }\n  const db = firebase.firestore();\n  useEffect(() => {\n    (async () => {\n      const getFB = await db.collection(\"SaMo\").doc(\"SaMoResults\").get();\n      resultsD(getFB.data().results);\n    })()\n  }, [db])\n  useEffect(() => {\n    (async () => {\n      const docRef = await db.collection('SaMo').doc('SaMoResults');\n      docRef.update({ results: results })\n    })()\n  }, [results, db])\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <div>\n          <Route exact path='/' component={Home} />\n          <Route path='/Goal' component={Goal} />\n          <Route path='/Graph' component={Graph} />\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","/Users/Yuto/Desktop/react/admin-finance/src/reportWebVitals.js",[],["18","19"],{"ruleId":"20","severity":1,"message":"21","line":281,"column":29,"nodeType":"22","messageId":"23","endLine":281,"endColumn":30,"fix":"24"},{"ruleId":"25","severity":1,"message":"26","line":283,"column":37,"nodeType":"27","messageId":"28","endLine":283,"endColumn":39},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},"rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"33","text":"34"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["35"],"no-negated-in-lhs",["36"],[9791,9792],"","no-global-assign","no-unsafe-negation"]